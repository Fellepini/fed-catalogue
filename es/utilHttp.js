import fetch, { Headers } from "node-fetch";
import https from "node:https";
import http from "node:http";
function getAgent(endpoint) {
    let agent = new http.Agent();
    if (endpoint.startsWith("https")) {
        agent = new https.Agent({
            rejectUnauthorized: false,
        });
    }
    return agent;
}
export async function post(endpoint, auth, payload) {
    const headers = new Headers();
    headers.set("Content-Type", "application/json");
    if (auth) {
        headers.set("Authorization", `Bearer ${auth}`);
    }
    const requestOptions = {
        headers,
        method: "POST",
        body: JSON.stringify(payload),
        agent: getAgent(endpoint)
    };
    const response = await fetch(`${endpoint}`, requestOptions);
    const json = await response.json();
    if (response.status !== 200 && response.status !== 201) {
        console.error("Error payload: ", json);
        throw new Error(`Bad status: ${response.status}`);
    }
    return json;
}
export async function get(endpoint, auth) {
    const agent = getAgent(endpoint);
    const headers = new Headers();
    headers.set("Accept", "application/json");
    if (auth) {
        headers.set("Authorization", `Bearer ${auth}`);
    }
    const response = await fetch(`${endpoint}`, { headers, agent });
    const json = await response.json();
    if (response.status !== 200) {
        console.error("Error payload: ", json);
        throw new Error(`Bad status: ${response.status}`);
    }
    return json;
}
export function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
export function toUnixSeconds(iso8601Date) {
    const date = new Date(iso8601Date);
    return Math.round(date.getTime() / 1000);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbEh0dHAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbEh0dHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDNUMsT0FBTyxLQUFLLE1BQU0sWUFBWSxDQUFDO0FBQy9CLE9BQU8sSUFBSSxNQUFNLFdBQVcsQ0FBQztBQUU3QixTQUFTLFFBQVEsQ0FBQyxRQUFnQjtJQUM5QixJQUFJLEtBQUssR0FBNkIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFdkQsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQzlCLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDcEIsa0JBQWtCLEVBQUUsS0FBSztTQUM1QixDQUFDLENBQUM7S0FDTjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxRQUFnQixFQUFFLElBQVksRUFBRSxPQUFnQjtJQUN2RSxNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDaEQsSUFBSSxJQUFJLEVBQUU7UUFDTixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDLENBQUM7S0FDbEQ7SUFFRCxNQUFNLGNBQWMsR0FBRztRQUNuQixPQUFPO1FBQ1AsTUFBTSxFQUFFLE1BQU07UUFDZCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDN0IsS0FBSyxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUM7S0FDNUIsQ0FBQztJQUVGLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsUUFBUSxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDNUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFbkMsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtRQUNwRCxPQUFPLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMsZUFBZSxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUNyRDtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLEdBQUcsQ0FBQyxRQUFnQixFQUFFLElBQVk7SUFDcEQsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRWpDLE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7SUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUMxQyxJQUFJLElBQUksRUFBRTtRQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLFVBQVUsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUNsRDtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsUUFBUSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNoRSxNQUFNLElBQUksR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUVuQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO1FBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0tBQ3JEO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU0sVUFBVSxLQUFLLENBQUMsRUFBVTtJQUM1QixPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLFdBQW1CO0lBQzdDLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRW5DLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDN0MsQ0FBQyJ9