// Copyright 2020-2022 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0
import { Credential, ProofOptions, IotaDocument, IotaIdentityClient, IotaDID, Timestamp, Duration, Presentation } from "@iota/identity-wasm/node/index.js";
import { Client } from "@iota/client-wasm/node/lib/index.js";
import { Converter } from "@iota/util.js";
import * as dotenv from "dotenv";
import * as dotenvExpand from "dotenv-expand";
const theEnv = dotenv.config();
dotenvExpand.expand(theEnv);
const { NODE_ENDPOINT, TOKEN } = process.env;
async function resolveDocument(didClient, did) {
    const elements = did.split(":");
    const didResult = IotaDID.fromAliasId(elements[elements.length - 1], elements[elements.length - 2]);
    const resolvedDocument = await didClient.resolveDid(didResult);
    console.log("Resolved DID document:", JSON.stringify(resolvedDocument, null, 2));
    return resolvedDocument;
}
async function run() {
    const client = new Client({
        primaryNode: {
            url: NODE_ENDPOINT,
            auth: { jwt: TOKEN }
        },
        localPow: true,
    });
    const didClient = new IotaIdentityClient(client);
    const issuerDid = "did:iota:tst:0xc138aaeac93104bbb4eb56eab2a689754b558872ecbf0a1bd89bf9aaffe06597";
    const privateKey = "0x4b5ead3c51d14dde35a8835259b1e5e2692787ca5374129c48bde4bd95b7e6a2cd9eb71c5e6d03ff50fea5556b3842a19445e1ca5d1f0b653b3a96f03ffa71d0";
    const holderDid = "did:iota:tst:0xfda48cdaf2d1be92155e32a3d526169d298d546afe7a688f96607d445a7a7faf";
    const holderPrivateKey = "0xd8bd8f8eecffc4ed36b1109a20c0e162354d146b716bf6981fe680f2b20e3d9bb3485404f80ad19becc652644efd46a09320c4a46e180fe9bf160a38c2f3d4ca";
    const issuerDocument = await resolveDocument(didClient, issuerDid);
    const holderDocument = await resolveDocument(didClient, holderDid);
    // Create a credential subject indicating the degree earned by Alice, linked to their DID.
    const subject = {
        id: holderDid,
        name: "Alice",
        degreeName: "Bachelor of Science and Arts",
        degreeType: "BachelorDegree - Extended More and More",
        GPA: "4.0",
    };
    // Create an unsigned `UniversityDegree` credential for Alice
    const unsignedVc = new Credential({
        id: "https://example.edu/credentials/3732",
        type: "UniversityDegreeCredential",
        issuer: issuerDid,
        credentialSubject: subject,
        expirationDate: Timestamp.nowUTC().checkedAdd(Duration.days(1500))
    });
    const privateKeyBytes = Converter.hexToBytes(privateKey);
    const holderPrivateKeyBytes = Converter.hexToBytes(holderPrivateKey);
    // Sign Credential.
    let signedVc;
    try {
        signedVc = issuerDocument.signCredential(unsignedVc, privateKeyBytes.slice(0, 32), "#sign-1", ProofOptions.default());
    }
    catch (error) {
        console.error(error);
        return;
    }
    // The issuer is now sure that the credential they are about to issue satisfies their expectations.
    // The credential is then serialized to JSON and transmitted to the holder in a secure manner.
    // Note that the credential is NOT published to the IOTA Tangle. It is sent and stored off-chain.
    const credentialJSON = signedVc.toJSON();
    console.log("Issued credential: \n", JSON.stringify(credentialJSON, null, 2));
    // A unique random challenge generated by the requester per presentation can mitigate replay attacks.
    const challenge = "475a7984-1bb5-4c4c-a56f-822bccd46440";
    // The verifier and holder also agree that the signature should have an expiry date
    const expires = Timestamp.nowUTC().checkedAdd(Duration.days(1500));
    // ===========================================================================
    // Step 5: Holder creates a verifiable presentation from the issued credential for the verifier to validate.
    // ===========================================================================
    // Deserialize the credential.
    const receivedVc = Credential.fromJSON(credentialJSON);
    // Create a Verifiable Presentation from the Credential
    const unsignedVp = new Presentation({
        holder: holderDid,
        verifiableCredential: receivedVc,
    });
    // Sign the verifiable presentation using the holder's verification method
    // and include the requested challenge and expiry timestamp.
    const signedVp = await holderDocument.signPresentation(unsignedVp, holderPrivateKeyBytes.slice(0, 32), "#sign-1", new ProofOptions({
        challenge: challenge,
        expires,
    }));
    // ===========================================================================
    // Step 6: Holder sends a verifiable presentation to the verifier.
    // ===========================================================================
    // Convert the Verifiable Presentation to JSON to send it to the verifier.
    const signedVpJSON = signedVp.toJSON();
    // ====================================
    console.log("Issued presentation: \n", JSON.stringify(signedVpJSON, null, 2));
}
run().then(() => console.log("Done")).catch(err => console.error(err));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlVlBXaXRoSU9UQUlkZW50aXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NyZWRlbnRpYWwvY3JlYXRlVlBXaXRoSU9UQUlkZW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9DQUFvQztBQUNwQyxzQ0FBc0M7QUFFdEMsT0FBTyxFQUNILFVBQVUsRUFDVixZQUFZLEVBQ1osWUFBWSxFQUFFLGtCQUFrQixFQUFFLE9BQU8sRUFDekMsU0FBUyxFQUNULFFBQVEsRUFDUixZQUFZLEVBQ2YsTUFBTSxtQ0FBbUMsQ0FBQztBQUUzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFN0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxQyxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUNqQyxPQUFPLEtBQUssWUFBWSxNQUFNLGVBQWUsQ0FBQztBQUM5QyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDL0IsWUFBWSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUU1QixNQUFNLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFFN0MsS0FBSyxVQUFVLGVBQWUsQ0FBQyxTQUE2QixFQUFFLEdBQVc7SUFDckUsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEcsTUFBTSxnQkFBZ0IsR0FBaUIsTUFBTSxTQUFTLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdF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